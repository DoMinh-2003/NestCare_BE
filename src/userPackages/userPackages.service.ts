import { BadRequestException, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from 'src/users/model/user.entity';
import { DurationType, Packages } from 'src/packages/entity/package.entity';
import {
  UserPackages,
  UserPackageStatus,
} from './entities/userPackages.entity';
import { VnpayService } from 'src/common/service/vnpay.service';
import {
  IPaginationOptions,
  paginate,
  Pagination,
} from 'nestjs-typeorm-paginate';
import { UserPackageServiceUsage } from 'src/users/model/userPackageServiceUsage.entity';
import { SchedulerRegistry } from '@nestjs/schedule';
import { MailService } from 'src/common/service/mail.service';
import { PackagesService } from 'src/packages/packages.service';
import { TransactionService } from 'src/transaction/transaction.service';
import { TransactionStatus, TransactionType } from 'src/transaction/entities/transaction.entity';


@Injectable()
export class UserPackagesService {
  constructor(
    @InjectRepository(UserPackages)
    private userPackagesRepository: Repository<UserPackages>,

    @InjectRepository(User)
    private userRepository: Repository<User>,

    // @InjectRepository(FetalRecord)
    // private fetalRecordRepository: Repository<FetalRecord>,

    @InjectRepository(Packages)
    private packagesRepository: Repository<Packages>,

    @InjectRepository(UserPackageServiceUsage)
    private userPackageServiceUsageRepository: Repository<UserPackageServiceUsage>,

    private schedulerRegistry: SchedulerRegistry,
    private vnpayService: VnpayService, // Inject VnpayService v√†o constructor

    private mailService: MailService,


    private transactionService: TransactionService, // Inject TransactionService
  ) {}

  // Mua g√≥i d·ªãch v·ª• cho thai nhi
  async purchasePackage(userId: string, packageId: string) {
    const user = await this.userRepository.findOne({
      where: { id: userId },
    });

    const packageEntity = await this.packagesRepository.findOne({
      where: { id: packageId },
      relations: ['packageServices'],
    });

  

    if (!user || !packageEntity) {
      throw new Error('User or Package not found');
    }

    const existingUserPackage = await this.userPackagesRepository.findOne({
      where: {
        user: { id: user.id }, // L·ªçc theo ID c·ªßa ng∆∞·ªùi d√πng
        package: { id: packageEntity.id }, // L·ªçc theo ID c·ªßa g√≥i d·ªãch v·ª•
        isActive: true
      },
    });

    if(existingUserPackage){
      throw new BadRequestException(`G√≥i d·ªãch v·ª• n√†y ${user.fullName} ƒëang s·ª≠ d·ª•ng`);
    }

    const userPackage = this.userPackagesRepository.create({
      user,
      //   fetalRecord,
      package: packageEntity,
    });

    const newUserPackage = await this.userPackagesRepository.save(userPackage);
    const param = `?order=${newUserPackage.id}`;
    const amount = userPackage.package.price * 100;

    return await this.vnpayService.createPayment(
      newUserPackage.id,
      param,
      amount,
    );
  }

  // L·∫•y c√°c g√≥i d·ªãch v·ª• c·ªßa m·∫π b·∫ßu
  //   async getUserPackagesForFetalRecord(fetalRecordId: string): Promise<UserPackages[]> {
  //     return this.userPackagesRepository.find({
  //       where: { fetalRecord: { id: fetalRecordId }, isDeleted: false },
  //       relations: ['package', 'user'],  // ƒê·∫£m b·∫£o l·∫•y th√¥ng tin g√≥i d·ªãch v·ª• v√† user
  //     });
  //   }

  // L·∫•y t·∫•t c·∫£ c√°c g√≥i d·ªãch v·ª• c·ªßa m·ªôt user (m·∫π b·∫ßu)
  async getUserPackagesByUser(userId: string): Promise<UserPackages[]> {
    return this.userPackagesRepository.find({
      where: { user: { id: userId }},
      relations: ['package', 'user'], // L·∫•y th√¥ng tin g√≥i d·ªãch v·ª• v√† thai nhi
    });
  }

  // L·∫•y c√°c g√≥i d·ªãch v·ª• theo tr·∫°ng th√°i
  async getUserPackagesByStatus(
    status: UserPackageStatus,
  ): Promise<UserPackages[]> {
    return this.userPackagesRepository.find({
      where: { status, isDeleted: false },
      relations: ['package', 'user'], // L·∫•y th√¥ng tin g√≥i d·ªãch v·ª•, thai nhi, v√† ng∆∞·ªùi d√πng
    });
  }

  // // Thay ƒë·ªïi tr·∫°ng th√°i c·ªßa g√≥i d·ªãch v·ª•
  // async changeStatus(id: string, newStatus: UserPackageStatus): Promise<UserPackages> {
  //   const userPackage = await this.userPackagesRepository.findOne({ where: { id: id }});
  //   if (!userPackage) {
  //     throw new Error('UserPackage not found');
  //   }

  //   userPackage.status = newStatus;
  //   return await this.userPackagesRepository.save(userPackage);
  // }

  async changeStatus(
    id: string,
    newStatus: UserPackageStatus,
  ): Promise<UserPackages> {
    const userPackage = await this.userPackagesRepository.findOne({
      where: { id: id },
      relations: [
        'user',
        'package',
        'package.packageServices',
        'package.packageServices.service',
      ],
    });

    if (!userPackage) {
      throw new Error('UserPackage not found');
    }

    userPackage.status = newStatus;

    // üîπ N·∫øu tr·∫°ng th√°i l√† PAID th√¨ t·∫°o `UserPackageServiceUsage`
    if (
      UserPackageStatus.PAID.toLocaleLowerCase == newStatus.toLocaleLowerCase
    ) {
      const user = userPackage.user;
      const packageServices = userPackage.package.packageServices;
      const packageEntity = userPackage.package;

      // Map d·ªãch v·ª• sang UserPackageServiceUsage
      const userServiceUsages = await Promise.all(
        packageServices.map(async (servicePackage) => {
          const existingUsage = await this.userPackageServiceUsageRepository.findOne({
            where: {
              user: { id: user.id },
              service: { id: servicePackage.service.id },
              order: { id: userPackage.id }, // Th√™m ƒëi·ªÅu ki·ªán t√¨m ki·∫øm theo order
            },
          });

          if (existingUsage) {
            // N·∫øu ƒë√£ t·ªìn t·∫°i cho ƒë∆°n h√†ng n√†y, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£t
            existingUsage.slot += servicePackage.slot;
            return this.userPackageServiceUsageRepository.save(existingUsage);
          } else {
            // N·∫øu ch∆∞a c√≥ cho ƒë∆°n h√†ng n√†y, t·∫°o m·ªõi v√† li√™n k·∫øt v·ªõi order
            return this.userPackageServiceUsageRepository.create({
              user,
              service: servicePackage.service,
              slot: servicePackage.slot,
              order: userPackage, // Li√™n k·∫øt v·ªõi UserPackages hi·ªán t·∫°i
            });
          }
        }),
      );

      // L∆∞u t·∫•t c·∫£ c√°c b·∫£n ghi m·ªõi ho·∫∑c c·∫≠p nh·∫≠t
      await this.userPackageServiceUsageRepository.save(userServiceUsages);

      userPackage.isActive = true; // K√≠ch ho·∫°t g√≥i sau khi thanh to√°n
      await this.setUserPackageInactiveSchedule(userPackage, packageEntity);

      await this.transactionService.create({
        userId: user.id,
        type: TransactionType.PURCHASE_PACKAGE,
        status: TransactionStatus.SUCCESS,
        amount: packageEntity.price,
        description: `Mua g√≥i d·ªãch v·ª•: ${packageEntity.name}`,
        userPackageId: userPackage.id,
      });
    }

    return await this.userPackagesRepository.save(userPackage);
  }

  private async setUserPackageInactiveSchedule(
    userPackage: UserPackages,
    packageEntity: Packages,
  ) {
    if (packageEntity.durationValue && packageEntity.durationType) {
      const now = new Date();
      let endDate: Date;

      switch (packageEntity.durationType) {
        case DurationType.DAY:
          endDate = new Date(
            now.setDate(now.getDate() + packageEntity.durationValue),
          );
          break;
        case DurationType.WEEK:
          endDate = new Date(
            now.setDate(now.getDate() + packageEntity.durationValue * 7),
          );
          break;
        case DurationType.MONTH:
          endDate = new Date(
            now.setMonth(now.getMonth() + packageEntity.durationValue),
          );
          break;
        default:
          console.warn(`Unknown DurationType: ${packageEntity.durationType}`);
          return;
      }

      const jobName = `deactivateUserPackage-${userPackage.id}`;

      // T·∫°o h√†m s·∫Ω ƒë∆∞·ª£c g·ªçi khi h·∫øt h·∫°n
      const callback = async () => {
        const packageToDeactivate = await this.userPackagesRepository.findOne({
          where: { id: userPackage.id },
        });
        if (packageToDeactivate && packageToDeactivate.isActive) {
          packageToDeactivate.isActive = false;
          await this.userPackagesRepository.save(packageToDeactivate);
          console.log(
            `G√≥i ${userPackage.id} ƒë√£ b·ªã h·ªßy k√≠ch ho·∫°t v√†o ${new Date()}`,
          );

          const subject = 'Th√¥ng b√°o g√≥i d·ªãch v·ª• ƒë√£ h·∫øt h·∫°n';
          const text = `Ch√†o ${packageToDeactivate.user.fullName || packageToDeactivate.user.username},\n\nG√≥i d·ªãch v·ª• "${packageToDeactivate.package
            ? packageToDeactivate.package.name
            : 'Kh√¥ng x√°c ƒë·ªãnh'
            }" m√† b·∫°n ƒë√£ mua v√†o ng√†y ${packageToDeactivate.createdAt.toLocaleDateString()} ƒë√£ h·∫øt h·∫°n v√†o ng√†y ${endDate.toLocaleDateString()}.\n\nVui l√≤ng ki·ªÉm tra t√†i kho·∫£n c·ªßa b·∫°n ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.\n\nTr√¢n tr·ªçng,\nƒê·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i.`;

          try {
            await this.mailService.sendWelcomeEmail(
              packageToDeactivate.user.email,
              subject,
              text,
            );
            console.log(
              `ƒê√£ g·ª≠i email th√¥ng b√°o h·∫øt h·∫°n cho ng∆∞·ªùi d√πng ${packageToDeactivate.user.email} v·ªÅ g√≥i ${packageToDeactivate.id}`,
            );
          } catch (error) {
            console.error(
              `L·ªói khi g·ª≠i email th√¥ng b√°o h·∫øt h·∫°n cho ng∆∞·ªùi d√πng ${packageToDeactivate.user.email}:`,
              error,
            );
          }
        }
      };

      // Th√™m timeout v√†o scheduler
      const timeoutId = setTimeout(
        callback,
        endDate.getTime() - new Date().getTime(),
      );
      this.schedulerRegistry.addTimeout(jobName, timeoutId);
      console.log(
        `ƒê√£ l√™n l·ªãch h·ªßy k√≠ch ho·∫°t g√≥i ${userPackage.id} v√†o ${endDate}`,
      );
    }
  }

  async getAllUserPackages(
    status?: string,
    packageName?: string,
    options: IPaginationOptions = { page: 1, limit: 10 }, // ƒê·∫£m b·∫£o options lu√¥n c√≥ gi√° tr·ªã
  ): Promise<Pagination<UserPackages>> {
    const queryBuilder = this.userPackagesRepository
      .createQueryBuilder('userPackage')
      .leftJoinAndSelect('userPackage.package', 'package') // Join b·∫£ng Packages
      .leftJoinAndSelect('userPackage.user', 'user'); // Join b·∫£ng Users
    // N·∫øu c√≥ filter theo status
    if (status) {
      queryBuilder.andWhere('userPackage.status = :status', { status });
    }

    // N·∫øu c√≥ filter theo package name
    if (packageName) {
      queryBuilder.andWhere('package.name LIKE :packageName', {
        packageName: `%${packageName}%`,
      });
    }

    queryBuilder.orderBy('userPackage.createdAt', 'DESC');

    return paginate<UserPackages>(queryBuilder, options);
  }

  // async upgradePackage(userPackageId: string, newPackageId: string) {
  //   // 1. T√¨m g√≥i hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
  //   const currentUserPackage = await this.userPackagesRepository.findOne({
  //     where: { id: userPackageId },
  //     relations: ['package', 'serviceUsages', 'user'],
  //   });

  //   if (!currentUserPackage) {
  //     throw new Error('G√≥i hi·ªán t·∫°i kh√¥ng t·ªìn t·∫°i');
  //   }

  //   // 2. T√¨m g√≥i m·ªõi c·∫ßn n√¢ng c·∫•p l√™n
  //   const newPackage = await this.packagesRepository.findOne({
  //     where: { id: newPackageId },
  //     relations: ['packageServices'],
  //   });

  //   if (!newPackage) {
  //     throw new Error('G√≥i m·ªõi kh√¥ng t·ªìn t·∫°i');
  //   }

  //   // 3. ƒê√°nh d·∫•u g√≥i c≈© kh√¥ng c√≤n ho·∫°t ƒë·ªông
  //   currentUserPackage.isActive = false;
  //   currentUserPackage.isDeleted = true;
  //   await this.userPackagesRepository.save(currentUserPackage);

  //   // 4. T·∫°o g√≥i m·ªõi
  //   const newUserPackage = this.userPackagesRepository.create({
  //     user: currentUserPackage.user,
  //     package: newPackage,
  //     status: UserPackageStatus.PENDING, // Ch·ªù thanh to√°n
  //     isActive: false,
  //   });

  //   const savedNewUserPackage = await this.userPackagesRepository.save(newUserPackage);

  //   // 5. Chuy·ªÉn c√°c l∆∞·ª£t s·ª≠ d·ª•ng ch∆∞a d√πng t·ª´ g√≥i c≈© sang g√≥i m·ªõi
  //   for (const usage of currentUserPackage.serviceUsages) {
  //     if (usage.slot > 0) {
  //       const newUsage = this.userPackageServiceUsageRepository.create({
  //         user: currentUserPackage.user,
  //         service: usage.service,
  //         slot: usage.slot, // Gi·ªØ nguy√™n s·ªë l∆∞·ª£t ch∆∞a d√πng
  //         order: savedNewUserPackage,
  //       });
  //       await this.userPackageServiceUsageRepository.save(newUsage);
  //     }
  //   }

  //   // 6. X·ª≠ l√Ω thanh to√°n (n·∫øu c·∫ßn)
  //   const priceDifference = newPackage.price - currentUserPackage.package.price;
  //   if (priceDifference > 0) {
  //     const param = `?order=${savedNewUserPackage.id}`;
  //     const paymentUrl = await this.vnpayService.createPayment(
  //       savedNewUserPackage.id,
  //       param,
  //       priceDifference * 100, // Ch√™nh l·ªách gi√°
  //     );
  //     return { newUserPackage: savedNewUserPackage, paymentUrl };
  //   }

  //   return savedNewUserPackage;
  // }

  async upgradePackage(userId: string, currentPackageId: string, newPackageId: string) {
    // L·∫•y th√¥ng tin user
    const user = await this.userRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
    }

    // L·∫•y th√¥ng tin g√≥i hi·ªán t·∫°i v√† c√°c d·ªãch v·ª• ƒë√£ s·ª≠ d·ª•ng
    const currentUserPackage = await this.userPackagesRepository.findOne({
      where: { id: currentPackageId, user: { id: userId }, isActive: true },
      relations: ['package', 'serviceUsages', 'serviceUsages.service'],
    });
    if (!currentUserPackage) {
      throw new Error('G√≥i hi·ªán t·∫°i kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng active');
    }

    // L·∫•y th√¥ng tin g√≥i m·ªõi
    const newPackage = await this.packagesRepository.findOne({
      where: { id: newPackageId },
      relations: ['packageServices'],
    });
    if (!newPackage) {
      throw new Error('G√≥i m·ªõi kh√¥ng t·ªìn t·∫°i');
    }

    // T√≠nh gi√° tr·ªã c√≤n l·∫°i c·ªßa g√≥i c≈©
    let remainingValue = 0;
    const totalServices = currentUserPackage.package.packageServices.length; // T·ªïng s·ªë d·ªãch v·ª• trong g√≥i
    const servicePrice = currentUserPackage.package.price / totalServices; // Gi√° tr·ªã m·ªói d·ªãch v·ª•
    const usedServices = currentUserPackage.serviceUsages.reduce((sum, usage) => sum + (usage.slot || 0), 0); // S·ªë d·ªãch v·ª• ƒë√£ d√πng
    const unusedServices = totalServices - usedServices; // S·ªë d·ªãch v·ª• ch∆∞a d√πng
    remainingValue = unusedServices * servicePrice; // Gi√° tr·ªã c√≤n l·∫°i

    // T√≠nh s·ªë ti·ªÅn ph·∫£i tr·∫£
    const amountToPay = newPackage.price - remainingValue;
    const finalAmount = amountToPay > 0 ? amountToPay : 0; // Kh√¥ng ho√†n ti·ªÅn n·∫øu √¢m

    // T·∫°o b·∫£n ghi UserPackages m·ªõi cho g√≥i n√¢ng c·∫•p
    const newUserPackage = this.userPackagesRepository.create({
      user,
      package: newPackage,
      status: UserPackageStatus.UPGRADE,
      isActive: false,
    });
    const savedNewUserPackage = await this.userPackagesRepository.save(newUserPackage);

    // T·∫°o URL thanh to√°n
    const param = `?order=${savedNewUserPackage.id}`;
    const paymentUrl = await this.vnpayService.createPayment(
      savedNewUserPackage.id,
      param,
      finalAmount * 100, // Vnpay y√™u c·∫ßu ƒë∆°n v·ªã VNƒê * 100
    );

    return {
      paymentUrl,
      orderId: savedNewUserPackage.id,
      amountToPay: finalAmount,
      remainingValue,
    };
  }
}
